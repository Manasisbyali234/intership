{"ast":null,"code":"var _jsxFileName = \"C:\\\\inership\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { chatService } from '../services/chatService';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (user) {\n      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000');\n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        newSocket.emit('join-chat', user.id);\n      });\n      newSocket.on('new-message', message => {\n        setMessages(prev => [...prev, message]);\n      });\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n      });\n      setSocket(newSocket);\n      return () => newSocket.close();\n    }\n  }, [user]);\n  const createSession = async (documentId = null) => {\n    if (!user) return;\n    const session = await chatService.createSession(user.id, documentId);\n    setCurrentSession(session);\n    setMessages([]);\n    return session;\n  };\n  const sendMessage = async (content, documentId = null) => {\n    if (!currentSession) {\n      await createSession(documentId);\n    }\n    const userMessage = {\n      role: 'user',\n      content,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await chatService.sendMessage({\n        sessionId: currentSession.sessionId,\n        message: content,\n        documentId,\n        userId: user.id\n      });\n\n      // Assistant message will be added via socket\n      return response;\n    } catch (error) {\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date(),\n        error: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      throw error;\n    }\n  };\n  const value = {\n    messages,\n    currentSession,\n    isConnected,\n    createSession,\n    sendMessage,\n    setMessages\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"dL0OcHHXU4SHdGaQqQ96E6yJW/g=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","chatService","useAuth","jsxDEV","_jsxDEV","ChatContext","useChat","_s","context","Error","ChatProvider","children","_s2","messages","setMessages","currentSession","setCurrentSession","socket","setSocket","isConnected","setIsConnected","user","newSocket","process","env","REACT_APP_SOCKET_URL","on","emit","id","message","prev","close","createSession","documentId","session","sendMessage","content","userMessage","role","timestamp","Date","response","sessionId","userId","error","errorMessage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/inership/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { chatService } from '../services/chatService';\nimport { useAuth } from './AuthContext';\n\nconst ChatContext = createContext();\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [messages, setMessages] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000');\n      \n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        newSocket.emit('join-chat', user.id);\n      });\n\n      newSocket.on('new-message', (message) => {\n        setMessages(prev => [...prev, message]);\n      });\n\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n      });\n\n      setSocket(newSocket);\n\n      return () => newSocket.close();\n    }\n  }, [user]);\n\n  const createSession = async (documentId = null) => {\n    if (!user) return;\n    \n    const session = await chatService.createSession(user.id, documentId);\n    setCurrentSession(session);\n    setMessages([]);\n    return session;\n  };\n\n  const sendMessage = async (content, documentId = null) => {\n    if (!currentSession) {\n      await createSession(documentId);\n    }\n\n    const userMessage = {\n      role: 'user',\n      content,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      const response = await chatService.sendMessage({\n        sessionId: currentSession.sessionId,\n        message: content,\n        documentId,\n        userId: user.id\n      });\n\n      // Assistant message will be added via socket\n      return response;\n    } catch (error) {\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date(),\n        error: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      throw error;\n    }\n  };\n\n  const value = {\n    messages,\n    currentSession,\n    isConnected,\n    createSession,\n    sendMessage,\n    setMessages\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}